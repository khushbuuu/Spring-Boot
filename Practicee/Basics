Topic covered : Obj creation in IOC contaiiner, @Component, @Autowired, @Primary, @Qualifier, 3 types dependency injection

package com.demo.demoApp;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.ApplicationContext;

@SpringBootApplication
public class DemoAppApplication {

	public static void main(String[] args) {

		ApplicationContext context = SpringApplication.run(DemoAppApplication.class, args);

		Dev obj = context.getBean(Dev.class);

		obj.build();
	}

}

package com.demo.demoApp;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Component;

@Component

public class Dev {

   //Field injection
    @Autowired //injecting the laptop here
    @Qualifier("laptop")  // will run laptop even if desk top has @Primary
    private Computer comp;

    //constructor injection-no need to write @Autowired for one constructor
    /* public Dev(Laptop laptop)
    {
    this.laptop=laptop
    }
     */

    //setter injection
    /*@Autowired
    public void setLaptop(Laptop laptop){
        this.laptop=laptop;
    }*/
    public void build(){
        comp.compile();
        System.out.println("Working on Awesome project");
    }
}

package com.demo.demoApp;

public interface Computer {
    void compile();
}


package com.demo.demoApp;

import org.springframework.context.annotation.Primary;
import org.springframework.stereotype.Component;

@Component

public class Laptop implements  Computer{
    public void compile(){
        System.out.println("Compiling with laptop");
    }
}


package com.demo.demoApp;

import org.springframework.context.annotation.Primary;
import org.springframework.stereotype.Component;

@Component
@Primary
public class Desktop implements Computer {
    public void compile() {
        System.out.println("Compiling with desktop");
    }
}
